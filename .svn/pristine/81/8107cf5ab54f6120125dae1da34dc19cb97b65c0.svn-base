package com.loginworks.aol.aol_native.activity;

import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.LocationManager;
import android.os.Bundle;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.Toast;

import com.android.volley.Request;
import com.loginworks.aol.aol_native.R;
import com.loginworks.aol.aol_native.databasehandler.DataHandlerDB;
import com.loginworks.aol.aol_native.extras.Appstatus;
import com.loginworks.aol.aol_native.extras.Const;
import com.loginworks.aol.aol_native.extras.JsonRequestAll;
import com.loginworks.aol.aol_native.extras.LocalUtilty;
import com.loginworks.aol.aol_native.extras.MyPreferences;
import com.loginworks.aol.aol_native.extras.ServiceURL;
import com.loginworks.aol.aol_native.models.BranchParser;
import com.loginworks.aol.aol_native.services.LocationService;
import com.loginworks.aol.aol_native.services.RegisterDeviceToken;
import com.loginworks.aol.aol_native.services.WebServiceAbstract;
import com.loginworks.aol.aol_native.services.WebServiceClient;

import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

public class Splash extends AppCompatActivity {

    private static final int PERMISSION_REQUEST = 1212;
    private Activity mActivity;
    private MyPreferences myPreferences;
    private Timer timer;
    private DataHandlerDB dataHandlerDB;
    private Intent intent;
    private AlertDialog alert;
    private boolean isMultiBranchRunning = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash);

        mActivity = this;
        myPreferences = MyPreferences.getInstance();
        dataHandlerDB = DataHandlerDB.getInstance();
        dataHandlerDB.clearBranch();

        timer = new Timer();
        TimerTask timerTask = new TimerTask() {
            @Override
            public void run() {
                if (LocalUtilty.hasPermissions(mActivity, LocalUtilty.PERMISSIONS)) {
                    if (isGPSEnable()) {
                        if (!LocationService.isServiceRunning()) {
                            startService(new Intent(mActivity, LocationService.class));
                        }
                        if (!RegisterDeviceToken.isServiceRunning()) {
                            startService(new Intent(mActivity, RegisterDeviceToken.class));
                        }
                        nextStep();
                    } else {
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                showSettings();
                            }
                        });
                    }
                } else {
                    ActivityCompat.requestPermissions(mActivity, LocalUtilty.PERMISSIONS, PERMISSION_REQUEST);
                }
            }
        };

        timer.schedule(timerTask, Const.SPALSH_TIMER, Const.SPALSH_TIMER);
    }

    @Override
    protected void onStop() {
        super.onStop();
        timer.cancel();
    }

    private boolean isGPSEnable() {
        LocationManager manager = (LocationManager) mActivity.getSystemService(Context.LOCATION_SERVICE);
        boolean statusOfGPS = manager.isProviderEnabled(LocationManager.GPS_PROVIDER);
        return statusOfGPS;
    }

    private void showSettings() {
        try {
            final AlertDialog.Builder builder = new AlertDialog.Builder(mActivity);
            builder.setMessage(getResources().getString(R.string.enable_GPS))
                    .setCancelable(false)
                    .setPositiveButton(getResources().getString(R.string.yes), new DialogInterface.OnClickListener() {
                        public void onClick(@SuppressWarnings("unused") final DialogInterface dialog, @SuppressWarnings("unused") final int id) {
                            startActivityForResult(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS), 2222);
                        }
                    })
                    .setNegativeButton(getResources().getString(R.string.no), new DialogInterface.OnClickListener() {
                        public void onClick(final DialogInterface dialog, @SuppressWarnings("unused") final int id) {
                            dialog.cancel();
                        }
                    });
            if (alert == null || !alert.isShowing()) {
                alert = builder.create();
                alert.show();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Toast.makeText(mActivity, getResources().getString(R.string.enable_GPS), Toast.LENGTH_SHORT).show();
        }
    }

    //Verify user's response of the permission requested
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case PERMISSION_REQUEST: {
                if (grantResults.length > 0 && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
                    nextStep();
                } else {
                    Log.e("onRequestPerm", "::else ");

                }
                break;
            }
        }
    }

    private void nextStep() {
        int branchCount = dataHandlerDB.getBranchCount();
        switch (branchCount) {
            case 0:
                if (Appstatus.getInstance(mActivity).isOnline()) {
                    hitLocationTask();
                } else {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(mActivity, getResources().getString(R.string.nointernet), Toast.LENGTH_SHORT).show();
                        }
                    });
                }
                break;
            case 1:
                ArrayList<BranchParser> listBranches = dataHandlerDB.getBranchData();
                if (listBranches != null) {
                    myPreferences.setBranchId(mActivity, listBranches.get(0).getBranch_id().trim());
                    myPreferences.setBranchName(mActivity, listBranches.get(0).getLocation_name().trim());
                    myPreferences.setBranchAddress(mActivity, listBranches.get(0).getAddress().trim());
                    myPreferences.setBranchCity(mActivity, listBranches.get(0).getCity().trim());
                    myPreferences.setBranchState(mActivity, listBranches.get(0).getState().trim());
                    myPreferences.setBranchCountry(mActivity, listBranches.get(0).getCountry().trim());
                    myPreferences.setBranchZipcode(mActivity, listBranches.get(0).getZipcode().trim());
                    myPreferences.setBranchMobile(mActivity, listBranches.get(0).getMobile().trim());
                    myPreferences.setBranchPhone(mActivity, listBranches.get(0).getPhone().trim());
                    myPreferences.setBranchLatitude(mActivity, listBranches.get(0).getLatitude().trim());
                    myPreferences.setBranchLongitude(mActivity, listBranches.get(0).getLongitude().trim());
                    myPreferences.setBranchEmail(mActivity, listBranches.get(0).getEmail().trim());

                    intent = new Intent(mActivity, HomePage.class);
                    startActivity(intent);
                    timer.cancel();
                    finish();
                }
                break;
            default:
                intent = new Intent(mActivity, BranchSelection.class);
                startActivity(intent);
                timer.cancel();
                finish();
                break;
        }
    }

    private void hitLocationTask() {
        try {
            if (!isMultiBranchRunning) {
                isMultiBranchRunning = true;

                JSONObject setRequestMultibranch = JsonRequestAll.setRequestMultibranch();
                Log.e("Multibranch REQUEST:::", "" + setRequestMultibranch);
                WebServiceAbstract webServiceAbstract = new WebServiceAbstract() {
                    @Override
                    public void onComplete(JSONObject jsonObject) {
                        if (jsonObject != null) {
                            Log.e("Multibranch Response:::", jsonObject.toString());
                            new BranchParser(jsonObject);
                            isMultiBranchRunning = false;
                        }
                    }
                };
                WebServiceClient.callPOSTService(ServiceURL.BRANCH, setRequestMultibranch,
                        Const.JSON_OBJECT_RESPONSE, null, webServiceAbstract, Request.Method.POST);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            isMultiBranchRunning = false;
        }

    }
}
